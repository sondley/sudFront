{"ast":null,"code":"import api from \"../../api\";\nexport var GET_COINTRADES = \"GET_COINTRADES\";\nexport var GET_COINTRADES_SUCCESS = \"GET_COINTRADES_SUCCESS\";\nexport var GET_COINTRADES_FAIL = \"GET_COINTRADES_FAIL\";\nexport var CREATE_COINTRADE = \"CREATE_COINTRADE\";\nexport var CREATE_COINTRADE_SUCCESS = \"CREATE_COINTRADE_SUCCESS\";\nexport var CREATE_COINTRADE_FAIL = \"CREATE_COINTRADE_FAIL\";\nexport var DELETE_COINTRADE = \"DELETE_COINTRADE\";\nexport var DELETE_COINTRADE_SUCCESS = \"DELETE_COINTRADE_SUCCESS\";\nexport var DELETE_COINTRADE_FAIL = \"DELETE_COINTRADE_FAIL\";\nexport var MODIFY_COINTRADE = \"MODIFY_COINTRADE\";\nexport var MODIFY_COINTRADE_SUCCESS = \"MODIFY_COINTRADE_SUCCESS\";\nexport var MODIFY_COINTRADE_FAIL = \"MODIFY_COINTRADE_FAIL\";\n\nfunction requestBegin(type) {\n  return {\n    type: type\n  };\n}\n\nfunction requestSuccess(type, data, message) {\n  return {\n    type: type,\n    payload: {\n      data: data,\n      message: message\n    }\n  };\n}\n\nfunction requestFail(type, message) {\n  return {\n    type: type,\n    payload: {\n      message: message\n    }\n  };\n}\n\nexport function getCoinTrades() {\n  return function (dispatch) {\n    dispatch(requestBegin(GET_COINTRADES));\n    return api.requestGET(\"/transactionEchanges\").then(function (objResponse) {\n      if (objResponse.data.success) {\n        dispatch(requestSuccess(GET_COINTRADES_SUCCESS, objResponse.data.data, objResponse.data.message));\n      } else {\n        dispatch(requestFail(GET_COINTRADES_FAIL, objResponse.data.message));\n      }\n    }).catch(function (objError) {\n      dispatch(requestFail(GET_COINTRADES_FAIL, objError.response));\n    });\n  };\n}\nexport function createCoinTrade(cointrade, onClose) {\n  return function (dispatch) {\n    dispatch(requestBegin(CREATE_COINTRADE));\n    return api.requestPOST(\"/transactionEchanges\", {\n      type: cointrade.type,\n      monnaie: cointrade.monnaie,\n      quantite: cointrade.quantite,\n      idVendeur: cointrade.idVendeur,\n      client: cointrade.client\n    }).then(function (objResponse) {\n      if (objResponse.data.success) {\n        dispatch(requestSuccess(CREATE_COINTRADE_SUCCESS, objResponse.data.data, objResponse.data.message));\n        onClose();\n      } else {\n        dispatch(requestFail(CREATE_COINTRADE_FAIL, objResponse.data.message));\n      }\n    }).catch(function (objError) {\n      dispatch(requestFail(CREATE_COINTRADE, objError.response));\n    });\n  };\n}\nexport function modifyCoinTrade(cointrade, onClose) {\n  return function (dispatch) {\n    dispatch(requestBegin(MODIFY_COINTRADE));\n    return api.requestPUT(\"/transactionEchanges/\".concat(cointrade._id), {\n      type: cointrade.type,\n      monnaie: cointrade.monnaie,\n      quantite: cointrade.quantite,\n      idVendeur: cointrade.idVendeur,\n      client: cointrade.client\n    }).then(function (objResponse) {\n      if (objResponse.data.success) {\n        dispatch(requestSuccess(MODIFY_COINTRADE_SUCCESS, objResponse.data.data, objResponse.data.message));\n        onClose();\n      } else {\n        dispatch(requestFail(MODIFY_COINTRADE_FAIL, objResponse.data.message));\n      }\n    }).catch(function (objError) {\n      dispatch(requestFail(MODIFY_COINTRADE_FAIL, objError.response));\n    });\n  };\n}\nexport function deleteCoinTrade(cointradeID, onClose) {\n  return function (dispatch) {\n    dispatch(requestBegin(DELETE_COINTRADE));\n    return api.requestDELETE(\"/transactionEchanges/\".concat(cointradeID)).then(function (objResponse) {\n      if (objResponse.data.success) {\n        dispatch(requestSuccess(DELETE_COINTRADE_SUCCESS, cointradeID, objResponse.data.message));\n        onClose();\n      } else {\n        dispatch(requestFail(DELETE_COINTRADE_FAIL, objResponse.data.message));\n      }\n    }).catch(function (objError) {\n      dispatch(requestFail(DELETE_COINTRADE_FAIL, objError.response));\n    });\n  };\n}\nexport function validateCoinTrade(cointrade, onClose) {\n  return function (dispatch) {\n    dispatch(requestBegin(MODIFY_COINTRADE));\n    return api.requestPOST(\"/ValidateTransactionEchange\", {\n      idUser: cointrade.idUser,\n      idTransactionEchange: cointrade.idTransactionEchange\n    }).then(function (objResponse) {\n      if (objResponse.data.success) {\n        dispatch(requestSuccess(MODIFY_COINTRADE_SUCCESS, objResponse.data.data, objResponse.data.message));\n        onClose();\n      } else {\n        dispatch(requestFail(MODIFY_COINTRADE_FAIL, objResponse.data.message));\n      }\n    }).catch(function (objError) {\n      dispatch(requestFail(MODIFY_COINTRADE_FAIL, objError.response));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/sondley/Desktop/PapaRohenson/grandsud/src/redux/actions/cointrades.js"],"names":["api","GET_COINTRADES","GET_COINTRADES_SUCCESS","GET_COINTRADES_FAIL","CREATE_COINTRADE","CREATE_COINTRADE_SUCCESS","CREATE_COINTRADE_FAIL","DELETE_COINTRADE","DELETE_COINTRADE_SUCCESS","DELETE_COINTRADE_FAIL","MODIFY_COINTRADE","MODIFY_COINTRADE_SUCCESS","MODIFY_COINTRADE_FAIL","requestBegin","type","requestSuccess","data","message","payload","requestFail","getCoinTrades","dispatch","requestGET","then","objResponse","success","catch","objError","response","createCoinTrade","cointrade","onClose","requestPOST","monnaie","quantite","idVendeur","client","modifyCoinTrade","requestPUT","_id","deleteCoinTrade","cointradeID","requestDELETE","validateCoinTrade","idUser","idTransactionEchange"],"mappings":"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","sourcesContent":["import api from \"../../api\";\n\nexport const GET_COINTRADES = \"GET_COINTRADES\";\nexport const GET_COINTRADES_SUCCESS = \"GET_COINTRADES_SUCCESS\";\nexport const GET_COINTRADES_FAIL = \"GET_COINTRADES_FAIL\";\nexport const CREATE_COINTRADE = \"CREATE_COINTRADE\";\nexport const CREATE_COINTRADE_SUCCESS = \"CREATE_COINTRADE_SUCCESS\";\nexport const CREATE_COINTRADE_FAIL = \"CREATE_COINTRADE_FAIL\";\nexport const DELETE_COINTRADE = \"DELETE_COINTRADE\";\nexport const DELETE_COINTRADE_SUCCESS = \"DELETE_COINTRADE_SUCCESS\";\nexport const DELETE_COINTRADE_FAIL = \"DELETE_COINTRADE_FAIL\";\nexport const MODIFY_COINTRADE = \"MODIFY_COINTRADE\";\nexport const MODIFY_COINTRADE_SUCCESS = \"MODIFY_COINTRADE_SUCCESS\";\nexport const MODIFY_COINTRADE_FAIL = \"MODIFY_COINTRADE_FAIL\";\n\nfunction requestBegin(type) {\n\treturn { type };\n}\n\nfunction requestSuccess(type, data, message) {\n\treturn { type, payload: { data, message } };\n}\n\nfunction requestFail(type, message) {\n\treturn { type, payload: { message } };\n}\n\nexport function getCoinTrades() {\n\treturn dispatch => {\n\t\tdispatch(requestBegin(GET_COINTRADES));\n\t\treturn api\n\t\t\t.requestGET(\"/transactionEchanges\")\n\t\t\t.then(objResponse => {\n\t\t\t\tif (objResponse.data.success) {\n\t\t\t\t\tdispatch(requestSuccess(GET_COINTRADES_SUCCESS, objResponse.data.data, objResponse.data.message));\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(requestFail(GET_COINTRADES_FAIL, objResponse.data.message));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(objError => {\n\t\t\t\tdispatch(requestFail(GET_COINTRADES_FAIL, objError.response));\n\t\t\t});\n\t};\n}\n\nexport function createCoinTrade(cointrade, onClose) {\n\treturn dispatch => {\n\t\tdispatch(requestBegin(CREATE_COINTRADE));\n\t\treturn api\n\t\t\t.requestPOST(\"/transactionEchanges\", {\n\t\t\t\ttype: cointrade.type,\n\t\t\t\tmonnaie: cointrade.monnaie,\n\t\t\t\tquantite: cointrade.quantite,\n\t\t\t\tidVendeur: cointrade.idVendeur,\n\t\t\t\tclient: cointrade.client\n\t\t\t})\n\t\t\t.then(objResponse => {\n\t\t\t\tif (objResponse.data.success) {\n\t\t\t\t\tdispatch(requestSuccess(CREATE_COINTRADE_SUCCESS, objResponse.data.data, objResponse.data.message));\n\t\t\t\t\tonClose();\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(requestFail(CREATE_COINTRADE_FAIL, objResponse.data.message));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(objError => {\n\t\t\t\tdispatch(requestFail(CREATE_COINTRADE, objError.response));\n\t\t\t});\n\t};\n}\n\nexport function modifyCoinTrade(cointrade, onClose) {\n\treturn dispatch => {\n\t\tdispatch(requestBegin(MODIFY_COINTRADE));\n\t\treturn api\n\t\t\t.requestPUT(`/transactionEchanges/${cointrade._id}`, {\n\t\t\t\ttype: cointrade.type,\n\t\t\t\tmonnaie: cointrade.monnaie,\n\t\t\t\tquantite: cointrade.quantite,\n\t\t\t\tidVendeur: cointrade.idVendeur,\n\t\t\t\tclient: cointrade.client\n\t\t\t})\n\t\t\t.then(objResponse => {\n\t\t\t\tif (objResponse.data.success) {\n\t\t\t\t\tdispatch(requestSuccess(MODIFY_COINTRADE_SUCCESS, objResponse.data.data, objResponse.data.message));\n\t\t\t\t\tonClose();\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(requestFail(MODIFY_COINTRADE_FAIL, objResponse.data.message));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(objError => {\n\t\t\t\tdispatch(requestFail(MODIFY_COINTRADE_FAIL, objError.response));\n\t\t\t});\n\t};\n}\n\nexport function deleteCoinTrade(cointradeID, onClose) {\n\treturn dispatch => {\n\t\tdispatch(requestBegin(DELETE_COINTRADE));\n\t\treturn api\n\t\t\t.requestDELETE(`/transactionEchanges/${cointradeID}`)\n\t\t\t.then(objResponse => {\n\t\t\t\tif (objResponse.data.success) {\n\t\t\t\t\tdispatch(requestSuccess(DELETE_COINTRADE_SUCCESS, cointradeID, objResponse.data.message));\n\t\t\t\t\tonClose();\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(requestFail(DELETE_COINTRADE_FAIL, objResponse.data.message));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(objError => {\n\t\t\t\tdispatch(requestFail(DELETE_COINTRADE_FAIL, objError.response));\n\t\t\t});\n\t};\n}\n\nexport function validateCoinTrade(cointrade, onClose) {\n\treturn dispatch => {\n\t\tdispatch(requestBegin(MODIFY_COINTRADE));\n\t\treturn api\n\t\t\t.requestPOST(\"/ValidateTransactionEchange\", {\n\t\t\t\tidUser: cointrade.idUser,\n\t\t\t\tidTransactionEchange: cointrade.idTransactionEchange\n\t\t\t})\n\t\t\t.then(objResponse => {\n\t\t\t\tif (objResponse.data.success) {\n\t\t\t\t\tdispatch(requestSuccess(MODIFY_COINTRADE_SUCCESS, objResponse.data.data, objResponse.data.message));\n\t\t\t\t\tonClose();\n\t\t\t\t} else {\n\t\t\t\t\tdispatch(requestFail(MODIFY_COINTRADE_FAIL, objResponse.data.message));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(objError => {\n\t\t\t\tdispatch(requestFail(MODIFY_COINTRADE_FAIL, objError.response));\n\t\t\t});\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}