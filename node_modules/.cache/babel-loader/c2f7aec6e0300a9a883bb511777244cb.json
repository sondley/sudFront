{"ast":null,"code":"import _objectSpread from \"/Users/sondley/Desktop/PapaRohenson/grandsud/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_COINTRADES, GET_COINTRADES_SUCCESS, GET_COINTRADES_FAIL, CREATE_COINTRADE, CREATE_COINTRADE_SUCCESS, CREATE_COINTRADE_FAIL, DELETE_COINTRADE, DELETE_COINTRADE_SUCCESS, DELETE_COINTRADE_FAIL, MODIFY_COINTRADE, MODIFY_COINTRADE_SUCCESS, MODIFY_COINTRADE_FAIL } from \"../actions/cointrades\";\nimport { RESET_ERRORS } from \"../actions/utils\";\nexport default function cointrade() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    transactions: [],\n    isFetching: false,\n    message: [],\n    error: false\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var payload = action.payload,\n      type = action.type;\n  var message;\n\n  switch (type) {\n    case GET_COINTRADES:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case CREATE_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case MODIFY_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case DELETE_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case GET_COINTRADES_SUCCESS:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: payload.data,\n        error: false,\n        message: message\n      });\n\n    case CREATE_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: state.transactions.concat(payload.data),\n        error: false,\n        message: message\n      });\n\n    case MODIFY_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      var array = state.transactions.map(function (cointrade) {\n        if (cointrade._id !== payload.data._id) {\n          return cointrade;\n        }\n\n        return _objectSpread({}, cointrade, payload.data);\n      });\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: array,\n        error: false,\n        message: message\n      });\n\n    case DELETE_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: state.transactions.filter(function (_ref) {\n          var _id = _ref._id;\n          return _id !== payload.data;\n        }),\n        error: false,\n        message: message\n      });\n\n    case GET_COINTRADES_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case CREATE_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case MODIFY_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case DELETE_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case RESET_ERRORS:\n      return _objectSpread({}, state, {\n        error: false,\n        message: []\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sondley/Desktop/PapaRohenson/grandsud/src/redux/reducers/cointrades.js"],"names":["GET_COINTRADES","GET_COINTRADES_SUCCESS","GET_COINTRADES_FAIL","CREATE_COINTRADE","CREATE_COINTRADE_SUCCESS","CREATE_COINTRADE_FAIL","DELETE_COINTRADE","DELETE_COINTRADE_SUCCESS","DELETE_COINTRADE_FAIL","MODIFY_COINTRADE","MODIFY_COINTRADE_SUCCESS","MODIFY_COINTRADE_FAIL","RESET_ERRORS","cointrade","state","transactions","isFetching","message","error","action","payload","type","concat","data","array","map","_id","filter"],"mappings":"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","sourcesContent":["import {\n\tGET_COINTRADES,\n\tGET_COINTRADES_SUCCESS,\n\tGET_COINTRADES_FAIL,\n\tCREATE_COINTRADE,\n\tCREATE_COINTRADE_SUCCESS,\n\tCREATE_COINTRADE_FAIL,\n\tDELETE_COINTRADE,\n\tDELETE_COINTRADE_SUCCESS,\n\tDELETE_COINTRADE_FAIL,\n\tMODIFY_COINTRADE,\n\tMODIFY_COINTRADE_SUCCESS,\n\tMODIFY_COINTRADE_FAIL\n} from \"../actions/cointrades\";\nimport { RESET_ERRORS } from \"../actions/utils\";\n\nexport default function cointrade(state = { transactions: [], isFetching: false, message: [], error: false }, action) {\n\tconst { payload, type } = action;\n\tlet message;\n\tswitch (type) {\n\t\tcase GET_COINTRADES:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase CREATE_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase MODIFY_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase DELETE_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\n\t\tcase GET_COINTRADES_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, transactions: payload.data, error: false, message };\n\t\tcase CREATE_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\ttransactions: state.transactions.concat(payload.data),\n\t\t\t\terror: false,\n\t\t\t\tmessage\n\t\t\t};\n\t\tcase MODIFY_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\tconst array = state.transactions.map(cointrade => {\n\t\t\t\tif (cointrade._id !== payload.data._id) {\n\t\t\t\t\treturn cointrade;\n\t\t\t\t}\n\t\t\t\treturn { ...cointrade, ...payload.data };\n\t\t\t});\n\t\t\treturn { ...state, isFetching: false, transactions: array, error: false, message };\n\t\tcase DELETE_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\ttransactions: state.transactions.filter(({ _id }) => _id !== payload.data),\n\t\t\t\terror: false,\n\t\t\t\tmessage\n\t\t\t};\n\n\t\tcase GET_COINTRADES_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase CREATE_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase MODIFY_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase DELETE_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\n\t\tcase RESET_ERRORS:\n\t\t\treturn { ...state, error: false, message: [] };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}