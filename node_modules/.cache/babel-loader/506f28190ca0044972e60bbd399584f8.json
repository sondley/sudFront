{"ast":null,"code":"import _toConsumableArray from \"/Users/sondley/Desktop/PapaRohenson/sudFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/Users/sondley/Desktop/PapaRohenson/sudFront/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { GET_COINTRADES, GET_COINTRADES_SUCCESS, GET_COINTRADES_FAIL, CREATE_COINTRADE, CREATE_COINTRADE_SUCCESS, CREATE_COINTRADE_FAIL, DELETE_COINTRADE, DELETE_COINTRADE_SUCCESS, DELETE_COINTRADE_FAIL, MODIFY_COINTRADE, MODIFY_COINTRADE_SUCCESS, MODIFY_COINTRADE_FAIL, VALIDATE_COINTRADE, VALIDATE_COINTRADE_SUCCESS, VALIDATE_COINTRADE_FAIL } from \"../actions/cointrades\";\nimport { RESET_ERRORS } from \"../actions/utils\";\nimport { sortBy } from \"lodash\";\nexport default function cointrade() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n    transactions: [],\n    printCoinTrade: {},\n    isFetching: false,\n    message: [],\n    error: false\n  };\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var payload = action.payload,\n      type = action.type;\n  var message;\n\n  switch (type) {\n    case GET_COINTRADES:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case CREATE_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case MODIFY_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case VALIDATE_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case DELETE_COINTRADE:\n      return _objectSpread({}, state, {\n        isFetching: true,\n        error: false\n      });\n\n    case GET_COINTRADES_SUCCESS:\n      message = [].concat(payload.message);\n      var transactions = sortBy(payload.data, [\"etat\", \"created\"]).reverse();\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: transactions,\n        error: false,\n        message: message\n      });\n\n    case CREATE_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: [payload.data].concat(_toConsumableArray(state.transactions)),\n        error: false,\n        message: message\n      });\n\n    case MODIFY_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      var array = state.transactions.map(function (cointrade) {\n        if (cointrade._id !== payload.data._id) {\n          return cointrade;\n        }\n\n        return _objectSpread({}, cointrade, payload.data);\n      });\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: array,\n        error: false,\n        message: message\n      });\n\n    case VALIDATE_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      var array2 = state.transactions.map(function (cointrade) {\n        if (cointrade._id !== payload.data._id) {\n          return cointrade;\n        }\n\n        return _objectSpread({}, cointrade, payload.data);\n      });\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: array2,\n        printCoinTrade: payload.data,\n        error: false,\n        message: message\n      });\n\n    case DELETE_COINTRADE_SUCCESS:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        transactions: state.transactions.filter(function (_ref) {\n          var _id = _ref._id;\n          return _id !== payload.data;\n        }),\n        error: false,\n        message: message\n      });\n\n    case GET_COINTRADES_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case CREATE_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case MODIFY_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case VALIDATE_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case DELETE_COINTRADE_FAIL:\n      message = [].concat(payload.message);\n      return _objectSpread({}, state, {\n        isFetching: false,\n        error: true,\n        message: message\n      });\n\n    case RESET_ERRORS:\n      return _objectSpread({}, state, {\n        error: false,\n        message: []\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/sondley/Desktop/PapaRohenson/sudFront/src/redux/reducers/cointrades.js"],"names":["GET_COINTRADES","GET_COINTRADES_SUCCESS","GET_COINTRADES_FAIL","CREATE_COINTRADE","CREATE_COINTRADE_SUCCESS","CREATE_COINTRADE_FAIL","DELETE_COINTRADE","DELETE_COINTRADE_SUCCESS","DELETE_COINTRADE_FAIL","MODIFY_COINTRADE","MODIFY_COINTRADE_SUCCESS","MODIFY_COINTRADE_FAIL","VALIDATE_COINTRADE","VALIDATE_COINTRADE_SUCCESS","VALIDATE_COINTRADE_FAIL","RESET_ERRORS","sortBy","cointrade","state","transactions","printCoinTrade","isFetching","message","error","action","payload","type","concat","data","reverse","array","map","_id","array2","filter"],"mappings":"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","sourcesContent":["import {\n\tGET_COINTRADES,\n\tGET_COINTRADES_SUCCESS,\n\tGET_COINTRADES_FAIL,\n\tCREATE_COINTRADE,\n\tCREATE_COINTRADE_SUCCESS,\n\tCREATE_COINTRADE_FAIL,\n\tDELETE_COINTRADE,\n\tDELETE_COINTRADE_SUCCESS,\n\tDELETE_COINTRADE_FAIL,\n\tMODIFY_COINTRADE,\n\tMODIFY_COINTRADE_SUCCESS,\n\tMODIFY_COINTRADE_FAIL,\n\tVALIDATE_COINTRADE,\n\tVALIDATE_COINTRADE_SUCCESS,\n\tVALIDATE_COINTRADE_FAIL\n} from \"../actions/cointrades\";\nimport { RESET_ERRORS } from \"../actions/utils\";\nimport { sortBy } from \"lodash\";\n\nexport default function cointrade(\n\tstate = { transactions: [], printCoinTrade: {}, isFetching: false, message: [], error: false },\n\taction\n) {\n\tconst { payload, type } = action;\n\tlet message;\n\tswitch (type) {\n\t\tcase GET_COINTRADES:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase CREATE_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase MODIFY_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase VALIDATE_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\t\tcase DELETE_COINTRADE:\n\t\t\treturn { ...state, isFetching: true, error: false };\n\n\t\tcase GET_COINTRADES_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\tconst transactions = sortBy(payload.data, [\"etat\", \"created\"]).reverse();\n\t\t\treturn { ...state, isFetching: false, transactions, error: false, message };\n\t\tcase CREATE_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\ttransactions: [payload.data, ...state.transactions],\n\t\t\t\terror: false,\n\t\t\t\tmessage\n\t\t\t};\n\t\tcase MODIFY_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\tconst array = state.transactions.map(cointrade => {\n\t\t\t\tif (cointrade._id !== payload.data._id) {\n\t\t\t\t\treturn cointrade;\n\t\t\t\t}\n\t\t\t\treturn { ...cointrade, ...payload.data };\n\t\t\t});\n\t\t\treturn { ...state, isFetching: false, transactions: array, error: false, message };\n\t\tcase VALIDATE_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\tconst array2 = state.transactions.map(cointrade => {\n\t\t\t\tif (cointrade._id !== payload.data._id) {\n\t\t\t\t\treturn cointrade;\n\t\t\t\t}\n\t\t\t\treturn { ...cointrade, ...payload.data };\n\t\t\t});\n\t\t\treturn { ...state, isFetching: false, transactions: array2, printCoinTrade: payload.data, error: false, message };\n\t\tcase DELETE_COINTRADE_SUCCESS:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tisFetching: false,\n\t\t\t\ttransactions: state.transactions.filter(({ _id }) => _id !== payload.data),\n\t\t\t\terror: false,\n\t\t\t\tmessage\n\t\t\t};\n\n\t\tcase GET_COINTRADES_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase CREATE_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase MODIFY_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase VALIDATE_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\t\tcase DELETE_COINTRADE_FAIL:\n\t\t\tmessage = [].concat(payload.message);\n\t\t\treturn { ...state, isFetching: false, error: true, message };\n\n\t\tcase RESET_ERRORS:\n\t\t\treturn { ...state, error: false, message: [] };\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}